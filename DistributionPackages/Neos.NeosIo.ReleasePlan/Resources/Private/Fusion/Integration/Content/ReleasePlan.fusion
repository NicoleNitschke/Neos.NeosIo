prototype(Neos.NeosIo.ReleasePlan:Content.ReleasePlan) < prototype(Neos.Neos:ContentComponent) {
    releasePlanData = Neos.Fusion:Map {
        items = ${q(node).find('[instanceof Neos.NeosIo.ReleasePlan:Content.Version]')}
        itemName = 'releaseVersion'
        itemRenderer = Neos.Fusion:DataStructure {
            version = ${q(releaseVersion).property('version')}
            @context {
                segmentsFromVersion = Neos.Fusion:DataStructure {
                    @context {
                        releaseDate = ${q(releaseVersion).property('releaseDate')}
                        activeSupportUntil = ${q(releaseVersion).property('activeSupportUntil')}
                        endOfLife = ${q(releaseVersion).property('endOfLife')}
                    }
                    0 = Neos.Fusion:DataStructure {
                        start = ${Date.format(releaseDate, 'Y-m-d')}
                        end = ${Date.format(activeSupportUntil, 'Y-m-d')}
                        task = Neos.Fusion:Case {
                            released {
                                condition = ${releaseDate < Date.now()}
                                renderer = ${'Released: ' + Date.format(releaseDate, 'F jS, Y') + String.chr(10) + 'Bugfixes until: ' + Date.format(activeSupportUntil, 'F Y')}
                            }
                            planned {
                                condition = true
                                renderer = ${'Planned Release: ' + Date.format(releaseDate, 'F Y') + String.chr(10) + 'Bugfixes until: ' + Date.format(activeSupportUntil, 'F Y')}
                            }
                        }
                        @if.has = ${releaseDate && activeSupportUntil}
                    }
                    1 = Neos.Fusion:DataStructure {
                        start = ${Date.format(q(releaseVersion).property('activeSupportUntil'), 'Y-m-d')}
                        end = ${Date.format(q(releaseVersion).property('endOfLife'), 'Y-m-d')}
                        task = ${'Security Updates until: ' + Date.format(endOfLife, 'F Y')}
                        @if.has = ${activeSupportUntil && endOfLife}
                    }
                }
            }
            segments = Neos.Fusion:Map {
                items = ${q(releaseVersion).find('[instanceof Neos.NeosIo.ReleasePlan:Content.Segment]')}
                itemName = 'versionSegment'
                itemRenderer = Neos.Fusion:DataStructure {
                    start = ${Date.format(q(versionSegment).property('start'), 'Y-m-d')}
                    end = ${Date.format(q(versionSegment).property('end'), 'Y-m-d')}
                    task = ${q(versionSegment).property('task')}
                }

                @process.addSegmentsFromVersion = ${Array.concat(segmentsFromVersion, value)}
            }
        }
    }

    amChartsScript = Neos.Fusion:Tag {
        tagName = 'script'
        attributes {
            src = Neos.Fusion:ResourceUri {
                path = 'resource://Neos.NeosIo.ReleasePlan/Public/Scripts/Main.js'
            }
        }
    }

    // The JSON data are used by the AmChart library to display the Gantt chart.
    // Colors are automaically generated and set depending on the index of the segment.
    // The higher the brighter the color will be.
    renderer = afx`
        <Neos.NeosIo.ReleasePlan:Presentation.Content.ReleasePlan {...props} />
    `
}
